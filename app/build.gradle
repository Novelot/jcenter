apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.0'
}

//apply from: 'bintray.gradle'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
group = PROJ_GROUP
version = PROJ_VERSION
//
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    user = hasProperty("bintrayUser") ? getProperty("bintrayUser") : getProperty("BINTRAY_USER")
    key = hasProperty("bintrayKey") ? getProperty("bintrayKey") : getProperty("BINTRAY_KEY")

    configurations = ['archives']    //When uploading configuration files
    publications = ['MyPublication']    //When uploading Maven-based publication files
    publish = true            //If version should be auto published after an upload

    // - AND/OR -
    // filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
    // from 'arbitrary-files'
    //into 'standalone_files/level1'
    // rename '(.+)\\.(.+)', '$1-suffix.$2'
    // }
    // dryRun = false //Whether to run this as dry-run, without deploying

    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = PROJ_NAME
        userOrg = 'novelot' //An optional organization name when the repo belongs to one of the user's orgs
        desc = PROJ_DESCRIPTION
        websiteUrl = PROJ_WEBSITEURL
        issueTrackerUrl = PROJ_ISSUETRACKERURL
        vcsUrl = PROJ_VCSURL
        licenses = ['Apache-2.0']
        labels = ['novelot', 'utils', 'android']
        publicDownloadNumbers = true
        // attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
        //Optional version descriptor
        version {
            name = PROJ_VERSION //Bintray logical version name
            //desc = //Optional - Version-specific description'
            //released  = //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = PROJ_VERSION
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = 'qijiuhekai' //Optional. The passphrase for GPG signing'
            }
            //Optional configuration for Maven Central sync of the version
//            mavenCentralSync {
//                sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
//                user = 'clearstarrysky' //OSS user token
//                password = 'qijiuhekai' //OSS user password
//                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//            }
        }
    }
}


publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId group
            version version
            artifactId PROJ_NAME
            artifact "build/outputs/aar/app-release.aar"
            artifact "build/outputs/aar/app-release.aar.asc"
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', PROJ_ARTIFACTID)
                root.appendNode('description', PROJ_DESCRIPTION)
                root.appendNode('url', PROJ_WEBSITEURL)

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', PROJ_ISSUETRACKERURL)

                def scm = root.appendNode('scm')
                scm.appendNode('url', PROJ_VCSURL)
                scm.appendNode('connection', PROJ_VCSURL)
                scm.appendNode('developerConnection', PROJ_SCM_DEV_CONNECTION)

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', PROJ_LICENCE_NAME)
                license.appendNode('url', PROJ_LICENCE_URL)
                license.appendNode('distribution', PROJ_LICENCE_DIST)
            }
        }
    }
}

apply plugin: 'signing'
signing {
    sign configurations.archives
}